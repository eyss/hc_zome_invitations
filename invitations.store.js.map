{"version":3,"file":"invitations.store.js","sourceRoot":"","sources":["../src/invitations.store.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AgentPubKeyB64,\n  EntryHashB64,\n  serializeHash,\n} from '@holochain-open-dev/core-types';\nimport { AppWebsocket } from '@holochain/conductor-api';\nimport {\n  observable,\n  makeObservable,\n  action,\n  runInAction,\n  computed,\n} from 'mobx';\n\nimport { InvitationsService } from './invitations.service';\n\nimport { Dictionary, InvitationEntryInfo } from './types';\n\nexport class InvitationsStore {\n  @observable\n  private invitations: Dictionary<InvitationEntryInfo> = {};\n\n  constructor(\n    protected invitationsService: InvitationsService,\n    protected clearOnInvitationComplete: boolean = false\n  ) {\n    makeObservable(this);\n\n    this.invitationsService.cellClient.addSignalHandler(signal =>\n      this.signalHandler(signal)\n    );\n  }\n\n  isInvitationCompleted(invitationHash: string) {\n    const invitation = this.invitations[invitationHash];\n\n    return (\n      invitation.invitation.invitees.length ===\n      invitation.invitees_who_accepted.length\n    );\n  }\n\n  get myAgentPubKey() {\n    return serializeHash(this.invitationsService.cellClient.cellId[1]);\n  }\n\n  get pendingInvitations(): Dictionary<InvitationEntryInfo> {\n    const pending: Dictionary<InvitationEntryInfo> = {};\n\n    for (const [hash, info] of Object.entries(this.invitations)) {\n      if (!this.isInvitationCompleted(hash)) {\n        pending[hash] = info;\n      }\n    }\n\n    return pending;\n  }\n\n  invitationInfo(invitationEntryHash: EntryHashB64): InvitationEntryInfo {\n    return this.invitations[invitationEntryHash];\n  }\n\n  @action\n  public async fetchMyPendingInvitations(): Promise<void> {\n    // Pedir al backend\n    const pending_invitations_entries_info: InvitationEntryInfo[] =\n      await this.invitationsService.getMyPendingInvitations();\n\n    runInAction(() => {\n      // Actualizar los datos dentro del runInAction para hacer trigger del render\n      pending_invitations_entries_info.map(invitation_entry_info => {\n        this.invitations[invitation_entry_info.invitation_entry_hash] =\n          invitation_entry_info;\n      });\n    });\n  }\n\n  @action\n  public async sendInvitation(inviteesList: AgentPubKeyB64[]) {\n    const create_invitation = await this.invitationsService.sendInvitation(\n      inviteesList\n    );\n\n    await this.fetchMyPendingInvitations();\n  }\n\n  @action\n  async acceptInvitation(invitation_entry_hash: EntryHashB64) {\n    const accept_invitation = await this.invitationsService.acceptInvitation(\n      invitation_entry_hash\n    );\n\n    return new Promise(resolve => {\n      runInAction(() => {\n        this.invitations[invitation_entry_hash].invitees_who_accepted.push(\n          this.myAgentPubKey\n        );\n\n        if (\n          this.clearOnInvitationComplete &&\n          this.isInvitationCompleted(invitation_entry_hash)\n        ) {\n          this.clearInvitation(invitation_entry_hash).then(() => resolve(null));\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  }\n\n  @action\n  async rejectInvitation(invitation_entry_hash: EntryHashB64) {\n    const reject_invitation = await this.invitationsService.rejectInvitation(\n      invitation_entry_hash\n    );\n    delete this.invitations[invitation_entry_hash];\n  }\n\n  @action\n  async clearInvitation(invitation_entry_hash: EntryHashB64) {\n    await this.invitationsService.clearInvitation(invitation_entry_hash);\n  }\n\n  @action\n  invitationReceived(signal: any) {\n    const invitation = signal.payload.InvitationReceived;\n\n    this.invitations[invitation.invitation_entry_hash] = invitation;\n  }\n\n  @action\n  async invitationAccepted(signal: any) {\n    const invitation = signal.payload.InvitationAccepted;\n    this.invitations[invitation.invitation_entry_hash] = invitation;\n\n    if (\n      this.clearOnInvitationComplete &&\n      this.isInvitationCompleted(invitation.invitation_entry_hash)\n    ) {\n      await this.clearInvitation(invitation.invitation_entry_hash);\n    }\n  }\n\n  @action\n  invitationRejected(signal: any) {\n    const invitation = signal.payload.InvitationRejected;\n\n    this.invitations[invitation.invitation_entry_hash] = invitation;\n  }\n\n  @action\n  async signalHandler(signal: any) {\n    switch (signal.data.payload.name) {\n      case 'invitation received':\n        this.invitationReceived(signal.data.payload);\n        break;\n\n      case 'invitation accepted':\n        this.invitationAccepted(signal.data.payload);\n        break;\n\n      case 'invitation updated':\n        break;\n\n      case 'invitation rejected':\n        this.invitationRejected(signal.data.payload);\n        break;\n\n      default:\n        break;\n    }\n  }\n}\n"]}