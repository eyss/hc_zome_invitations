{"version":3,"file":"invitations.store.js","sourceRoot":"","sources":["../src/invitations.store.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  observable,\n  makeObservable,\n  action,\n  runInAction,\n  computed,\n} from 'mobx';\n\nimport { InvitationsService } from './invitations.service';\nimport { ProfilesService, ProfilesStore } from '@holochain-open-dev/profiles';\n\nimport {\n  AgentPubKey,\n  HeaderHash,\n  Invitation,\n  Dictionary,\n  InvitationEntryInfo,\n  EntryHash,\n} from './types';\nimport { table } from 'console';\n\nexport class InvitationsStore {\n  @observable\n  public invitations: Dictionary<InvitationEntryInfo> = {};\n\n  constructor(\n    protected invitationsService: InvitationsService,\n    public profilesStore: ProfilesStore,\n    protected clearOnInvitationComplete: boolean = false\n  ) {\n    makeObservable(this);\n  }\n\n  isInvitationCompleted(invitationHash: string) {\n    const invitation = this.invitations[invitationHash];\n\n    return (\n      invitation.invitation.invitees.length ===\n      invitation.invitees_who_accepted.length\n    );\n  }\n\n  @action\n  public async fetchMyPendingInvitations(): Promise<void> {\n    // Pedir al backend\n    const pending_invitations_entries_info: InvitationEntryInfo[] =\n      await this.invitationsService.getMyPendingInvitations();\n\n    runInAction(() => {\n      // Actualizar los datos dentro del runInAction para hacer trigger del render\n      pending_invitations_entries_info.map(invitation_entry_info => {\n        this.invitations[invitation_entry_info.invitation_entry_hash] =\n          invitation_entry_info;\n      });\n    });\n  }\n\n  @action\n  public async sendInvitation(inviteesList: AgentPubKey[]) {\n    const create_invitation = await this.invitationsService.sendInvitation(\n      inviteesList\n    );\n\n    await this.fetchMyPendingInvitations();\n  }\n\n  @action\n  async acceptInvitation(invitation_entry_hash: EntryHash) {\n    const accept_invitation = await this.invitationsService.acceptInvitation(\n      invitation_entry_hash\n    );\n\n    runInAction(() => {\n      this.invitations[invitation_entry_hash].invitees_who_accepted.push(\n        this.profilesStore.myAgentPubKey\n      );\n\n      if (\n        this.clearOnInvitationComplete &&\n        this.isInvitationCompleted(invitation_entry_hash)\n        ) {\n        console.log(this.invitations[invitation_entry_hash], 'cleared');\n        this.clearInvitation(invitation_entry_hash);\n      }\n    });\n  }\n\n  @action\n  async rejectInvitation(invitation_entry_hash: EntryHash) {\n    const reject_invitation = await this.invitationsService.rejectInvitation(\n      invitation_entry_hash\n    );\n    delete this.invitations[invitation_entry_hash];\n  }\n\n  @action\n  async clearInvitation(invitation_entry_hash: EntryHash) {\n    await this.invitationsService.clearInvitation(invitation_entry_hash);\n    delete this.invitations[invitation_entry_hash];\n  }\n\n  @action\n  invitationReceived(signal: any) {\n    const invitation = signal.payload.InvitationReceived;\n\n    this.invitations[invitation.invitation_entry_hash] = invitation;\n  }\n\n  @action\n  invitationAccepted(signal: any) {\n    const invitation = signal.payload.InvitationAccepted;\n    this.invitations[invitation.invitation_entry_hash] = invitation;\n\n    if (\n      this.clearOnInvitationComplete &&\n      this.isInvitationCompleted(invitation.invitation_entry_hash)\n    ) {\n      this.clearInvitation(invitation.invitation_entry_hash);\n    }\n  }\n\n  @action\n  invitationRejected(signal: any) {\n    const invitation = signal.payload.InvitationRejected;\n\n    this.invitations[invitation.invitation_entry_hash] = invitation;\n  }\n\n  @action\n  async signalHandler(signal: any) {\n    switch (signal.data.payload.name) {\n      case 'invitation received':\n        this.invitationReceived(signal.data.payload);\n        break;\n\n      case 'invitation accepted':\n        this.invitationAccepted(signal.data.payload);\n        break;\n\n      case 'invitation updated':\n        break;\n\n      case 'invitation rejected':\n        this.invitationRejected(signal.data.payload);\n        break;\n\n      default:\n        break;\n    }\n  }\n}\n"]}