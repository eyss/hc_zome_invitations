{"version":3,"file":"invitations-store.js","sourceRoot":"","sources":["../../src/state/invitations-store.ts"],"names":[],"mappings":"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","sourcesContent":["import { CellClient } from '@holochain-open-dev/cell-client';\nimport {\n  AgentPubKeyB64,\n  EntryHashB64,\n  Dictionary,\n  serializeHash,\n} from '@holochain-open-dev/core-types';\nimport { writable, Writable, derived } from 'svelte/store';\n\nimport { InvitationsService } from '../invitations-service';\n\nimport { InvitationEntryInfo } from '../types';\nimport { isInvitationCompleted } from './selectors';\n\nexport class InvitationsStore {\n  private invitations: Writable<Dictionary<InvitationEntryInfo>> = writable({});\n\n  public pendingInvitations = derived(this.invitations, invitations => {\n    const pending: Dictionary<InvitationEntryInfo> = {};\n\n    for (const [hash, info] of Object.entries(invitations)) {\n      if (!isInvitationCompleted(invitations[hash])) {\n        pending[hash] = info;\n      }\n    }\n\n    return pending;\n  });\n\n  invitationsService: InvitationsService;\n\n  constructor(\n    protected cellClient: CellClient,\n    protected clearOnInvitationComplete: boolean = false\n  ) {\n    this.invitationsService = new InvitationsService(cellClient);\n    this.invitationsService.cellClient.addSignalHandler(this.signalHandler);\n  }\n\n  invitationInfo(invitationHash: EntryHashB64) {\n    return derived(\n      this.invitations,\n      invitations => invitations[invitationHash]\n    );\n  }\n\n  get myAgentPubKey() {\n    return serializeHash(this.invitationsService.cellClient.cellId[1]);\n  }\n\n  public async fetchMyPendingInvitations(): Promise<void> {\n    // Pedir al backend\n    const pending_invitations_entries_info: InvitationEntryInfo[] =\n      await this.invitationsService.getMyPendingInvitations();\n\n    this.invitations.update(invitations => {\n      pending_invitations_entries_info.map(invitation_entry_info => {\n        invitations[invitation_entry_info.invitation_entry_hash] =\n          invitation_entry_info;\n      });\n      return invitations;\n    });\n  }\n\n  public async sendInvitation(inviteesList: AgentPubKeyB64[]) {\n    const create_invitation = await this.invitationsService.sendInvitation(\n      inviteesList\n    );\n\n    await this.fetchMyPendingInvitations();\n  }\n\n  async acceptInvitation(invitation_entry_hash: EntryHashB64) {\n    const accept_invitation = await this.invitationsService.acceptInvitation(\n      invitation_entry_hash\n    );\n\n    return new Promise(resolve => {\n      this.invitations.update(invitations => {\n        const invitationInfo = invitations[invitation_entry_hash];\n        invitationInfo.invitees_who_accepted.push(this.myAgentPubKey);\n\n        if (\n          this.clearOnInvitationComplete &&\n          isInvitationCompleted(invitationInfo)\n        ) {\n          this.clearInvitation(invitation_entry_hash).then(() => resolve(null));\n        } else {\n          resolve(null);\n        }\n        return invitations;\n      });\n    });\n  }\n\n  async rejectInvitation(invitation_entry_hash: EntryHashB64) {\n    const reject_invitation = await this.invitationsService.rejectInvitation(\n      invitation_entry_hash\n    );\n    this.invitations.update(invitations => {\n      delete invitations[invitation_entry_hash];\n      return invitations;\n    });\n  }\n\n  async clearInvitation(invitation_entry_hash: EntryHashB64) {\n    await this.invitationsService.clearInvitation(invitation_entry_hash);\n  }\n\n  invitationReceived(signal: any) {\n    const invitation = signal.payload.InvitationReceived;\n\n    this.invitations.update(invitations => {\n      invitations[invitation.invitation_entry_hash] = invitation;\n      return invitations;\n    });\n  }\n\n  async invitationAccepted(signal: any) {\n    const invitation = signal.payload.InvitationAccepted;\n    this.invitations.update(invitations => {\n      invitations[invitation.invitation_entry_hash] = invitation;\n      return invitations;\n    });\n\n    if (this.clearOnInvitationComplete && isInvitationCompleted(invitation)) {\n      await this.clearInvitation(invitation.invitation_entry_hash);\n    }\n  }\n\n  invitationRejected(signal: any) {\n    const invitation = signal.payload.InvitationRejected;\n\n    this.invitations.update(invitations => {\n      invitations[invitation.invitation_entry_hash] = invitation;\n      return invitations;\n    });\n  }\n\n  async signalHandler(signal: any) {\n    switch (signal.data.payload.name) {\n      case 'invitation received':\n        this.invitationReceived(signal.data.payload);\n        break;\n\n      case 'invitation accepted':\n        this.invitationAccepted(signal.data.payload);\n        break;\n\n      case 'invitation updated':\n        break;\n\n      case 'invitation rejected':\n        this.invitationRejected(signal.data.payload);\n        break;\n\n      default:\n        break;\n    }\n  }\n}\n"]}